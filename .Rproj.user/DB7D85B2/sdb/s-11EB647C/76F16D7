{
    "collab_server" : "",
    "contents" : "install.packages(\"ggmap\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"lubridate\")\ninstall.packages(\"dplyr\")\n\ndevtools::install_github(\"dkahle/ggmap\")\ndevtools::install_github(\"hadley/ggplot2\")\n\n\nlibrary(ggmap)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(dplyr)\n\n### get file ####\n\n\n### Postgres db credentials ####\ncred = read.table(\"prod_cred.csv\", sep = \",\")\n\n# Postgres db credentials\nMyHost = as.character(cred[1,3])\nMyPort = as.character(cred[1 ,4])\nMyDbname = as.character(cred[1 ,5])\nMyUser = as.character(cred[1,1])\npw = as.character(cred[1,2])\n\ncon <- dbConnect(RPostgres::Postgres(),\n                 host = MyHost,\n                 port = MyPort,\n                 dbname = MyDbname,\n                 user = MyUser,\n                 password = pw)\n\nsort(dbListTables(con))\n\n\nbar_orders <- dbSendQuery(con, \n                               \"select \n\n                          o.user_id\n                          , o.created::date as order_date\n                          , o.id as order_id\n                          , ua.address user_address\n                          , ua.lat user_lat\n                          , ua.lng user_lon\n                          \n                          , o.store_details\n                          , a.lat store_lat\n                          , a.lng store_long\n                          \n                          , a.delivery_zone_id \n                          , dz.name delivery_zone\n                          \n                          from jinn_order o\n                          left join address as A on  o.store_address_id  = a.id \n                          left join jinn_user_address as ua on ua.id = o.jinn_user_address_id\n                          left join delivery_zone dz on a.delivery_zone_id = dz.id\n\n                          where lower(dz.name) = 'barcelona' and lower(ua.address) NOT LIKE '%fake%'\n\n                          and o.status_id in (6,7)\n                          order by o.created::date\")\n\n\nbar = dbFetch(bar_orders)\ndbClearResult(bar_orders)\n\nstr(bar)\nsummary(bar)\n\nbar$order_date = as_date(bar$order_date)\n\n\nmad_orders = dbSendQuery(con,\"select \n\n              o.user_id\n              , o.created::date as order_date\n              , o.id as order_id\n              , ua.address user_address\n              , ua.lat user_lat\n              , ua.lng user_lon\n              \n              , o.store_details\n              , a.lat store_lat\n              , a.lng store_long\n              \n              , a.delivery_zone_id \n              , dz.name delivery_zone\n              \n              from jinn_order o\n            \n              left join address as A on  o.store_address_id  = a.id \n              left join jinn_user_address as ua on ua.id = o.jinn_user_address_id\n              left join delivery_zone dz on a.delivery_zone_id = dz.id\n              \n              where a.delivery_zone_id = 6 and lower(ua.address) NOT LIKE '%fake%'\n              \n              order by o.created::date\")\n\n\nmad = dbFetch(mad_orders)\ndbClearResult(mad_orders)\n\nstr(mad)\nsummary(mad)\n\nmad$order_date = as_date(mad$order_date)\n\n\n### datasets ####\n\n  bar_user = \n  bar %>%\n  mutate(user_lat2 = round(user_lat, 3),\n         user_long2 = round(user_lon, 3),\n         store_lat2 = round(store_lat, 3),\n         store_long2 = round(store_long, 3)) %>%\n    select(user_long2, user_lat2)\n\nbar_store =\n  bar %>%\n  mutate(user_lat2 = round(user_lat, 3),\n         user_long2 = round(user_lon, 3),\n         store_lat2 = round(store_lat, 3),\n         store_long2 = round(store_long, 3)) %>%\n  select(store_long2, store_lat2)\n\nhead(bar_store)\nstr(bar_store)\nhead(bar_user)\nsummary(bar_user)\n\n?get_map\n\n\n\nmad_user = \n  mad %>%\n  mutate(user_lat2 = round(user_lat, 3),\n         user_long2 = round(user_lon, 3),\n         store_lat2 = round(store_lat, 3),\n         store_long2 = round(store_long, 3)) %>%\n  select(user_long2, user_lat2)\n\n\n\n# wrong coordinates for  Bico de Xeado (Bico de xeado calle luchana 4)\n# changed to coordinates found on GoogleMaps \n# 40.429481, -3.701674\nmad$store_long[mad$store_long==-0.428060] = -3.701674\nmad$store_lat[mad$store_lat==39.15838] = 40.429481\n\n\nmad_store =\n  mad %>%\n  mutate(user_lat2 = round(user_lat, 3),\n         user_long2 = round(user_lon, 3),\n         store_lat2 = round(store_lat, 3),\n         store_long2 = round(store_long, 3)) %>%\n  select(store_long2, store_lat2)\n\nhead(mad_store)\nstr(mad_store)\nhead(mad_user)\nsummary(mad_user)\n\n### map coordinates ####\n# barcelona users\nbar_user_lon = c(min(bar_user$user_long2), max(bar_user$user_long2)) \nbar_user_lat = c(min(bar_user$user_lat2), max(bar_user$user_lat2)) \n\nbar_user_lon\nbar_user_lat\n\n\nbar_store_lon = c(min(bar_store$store_long2), max(bar_store$store_long2)) \nbar_store_lat = c(min(bar_store$store_lat2), max(bar_store$store_lat2)) \n\nbar_store_lon\nbar_store_lat\n\n\nsummary(mad)\nsummary(mad_store)\n\nmad %>% arrange(store_lat)\n\n\n\nmad_user_lon = c(min(mad_user$user_long2), max(mad_user$user_long2)) \nmad_user_lat = c(min(mad_user$user_lat2), max(mad_user$user_lat2)) \n\nmad_user_lon\nmad_user_lat\n\n\nmad_store_lon = c(min(mad_store$store_long2), max(mad_store$store_long2)) \nmad_store_lat = c(min(mad_store$store_lat2), max(mad_store$store_lat2)) \n\nmad_store_lon\nmad_store_lat\n\n\n\n### base map ####\n# barcelona user\nbar_user_map = get_map(location = c(lon = mean(bar_user_lon), lat = mean(bar_user_lat)), #'Barcelona',\n                  maptype=\"hybrid\",  zoom = 12)\nggmap(bar_user_map)\n\n\nbar_user_map2 = get_map(location = c(lon = mean(bar_user_lon), lat = mean(bar_user_lat)), #'Barcelona',\n                      zoom = 12)\nggmap(bar_user_map2)\n\n\n# barcelona store \nbar_store_lon\nbar_store_lat\n\nbar_store_map = get_map(location = c(lon = mean(bar_store_lon), lat = mean(bar_store_lat)), #'Barcelona',\n                       maptype=\"hybrid\",  zoom = 12)\nggmap(bar_store_map)\n\n\nbar_store_map2 = get_map(location = c(lon = mean(bar_store_lon), lat = mean(bar_store_lat)), #'Barcelona',\n                        zoom = 12)\nggmap(bar_store_map2)\n\n\n\n\n# madrid user\nmad_user_map = get_map(location = c(lon = mean(mad_user_lon), lat = mean(mad_user_lat)), \n                       maptype=\"hybrid\",  zoom = 12)\nggmap(mad_user_map)\n\n\nmad_user_map2 = get_map(location = c(lon = mean(mad_user_lon), lat = mean(mad_user_lat)), \n                        zoom = 12)\nggmap(mad_user_map2)\n\n\n# madrid store \nmad_store_lon\nmad_store_lat\n\nmad_store_map = get_map(location = c(lon = mean(mad_store_lon), lat = mean(mad_store_lat)), \n                      zoom = 13)\nggmap(mad_store_map)\n\n\nmad_store_map2 = get_map(location = c(lon = mean(mad_store_lon), lat = mean(mad_store_lat)), \n                         zoom = 12)\nggmap(mad_store_map2)\n\n\n\n### plotting trials ####\n\n\n# trial 4 - success!! ####\n# bar user\nhead(bar_user)\n\n?get_map\n\nbar_user_map = \n  ggmap(bar_user_map2, extent = \"device\") +\n  stat_density_2d(aes(x = user_long2, y = user_lat2, fill = ..level.., alpha=1),\n                  data=bar_user, geom = \"polygon\") +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  scale_alpha(range = c(0.00, 0.5), guide = FALSE) +\n  scale_x_continuous(limits = bar_user_lon) +\n  scale_y_continuous(limits = bar_user_lat) \n\n\n# bar store \n\nhead(bar_store)\n\nbar_store_map = \n  ggmap(bar_store_map2, extent = \"device\") +\n  stat_density_2d(aes(x = store_long2, y = store_lat2, fill = ..level.., alpha=1),\n                  data=bar_store, geom = \"polygon\") +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  scale_alpha(range = c(0.00, 0.5), guide = FALSE) +\n  scale_x_continuous(limits = bar_store_lon) +\n  scale_y_continuous(limits = bar_store_lat) \n\n\n# mad user \n\n\nmad_user_map = \n  ggmap(mad_user_map2, extent = \"device\") +\n  stat_density_2d(aes(x = user_long2, y = user_lat2, fill = ..level.., alpha=1),\n                  data=mad_user, geom = \"polygon\") +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  scale_alpha(range = c(0.00, 0.5), guide = FALSE) +\n  scale_x_continuous(limits = mad_user_lon) +\n  scale_y_continuous(limits = mad_user_lat) \n\n\n# mad store \n\nmad_store_map = \n  ggmap(mad_store_map, extent = \"device\") +\n  stat_density_2d(aes(x = store_long2, y = store_lat2, fill = ..level.., alpha=1),\n                  data=mad_store, geom = \"polygon\") +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  scale_alpha(range = c(0.00, 0.5), guide = FALSE) +\n  scale_x_continuous(limits = mad_store_lon) +\n  scale_y_continuous(limits = mad_store_lat) \n\n\n\n\n\n## trial 1 - no\nggmap(madrid_map) + \n  geom_point(data = mad2, \n             aes(x = long2, \n                 y = lat2, \n                 colour = no_orders)) \n\n\n+\n  scale_x_continuous(limits = c(-3.75, -3.60)) +\n  scale_y_continuous(limits = c(4.38, 4.50))\n\n\n## trial 2 - rubbish\n?ggmap\n\nggmap(madrid_map) +\n  geom_tile(data = mad2, aes(x = long2, y = lat2, \n                             alpha = no_orders),\n            fill = 'blue', size = 3) +\n  theme(axis.title.y = element_blank(), axis.title.x = element_blank())\n\n\n## trial 3 - working progress\n?stat_density2d\n\nggmap(madrid_map, extent = \"device\") + \n  geom_density2d(data = mad, aes(x = long2, y = lat2)) +\n  \n  stat_density2d(data = mad, aes(x = long2, y = lat2, fill = ..level.., alpha = ..level..),\n                 geom = \"polygon\") + \n  \n  \n  \n  scale_fill_gradient(low = \"green\", high = \"red\", guide = FALSE)\n+\n  scale_alpha(range = c(0, 0.3), guide = FALSE)\n\n\n\n",
    "created" : 1495663377254.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1583700267",
    "id" : "76F16D7",
    "lastKnownWriteTime" : 1488207444,
    "last_content_update" : 1488207444,
    "path" : "~/MEGA/Jinn/files/kasia/heat_maps/BarcelonaHeatMap.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}